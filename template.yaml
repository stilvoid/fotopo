AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders: ["*"]
          AllowedMethods: ["POST"]
          AllowedOrigins: ["*"]

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  Table:
    Type: AWS::Serverless::SimpleTable

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: fotopo
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool

  Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.handler
      Runtime: python3.6
      CodeUri: ./lambda.py
      Environment:
        Variables:
          BUCKET: !Ref StorageBucket
          REGION: !Ref AWS::Region
          TABLE: !Ref Table
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:DeleteObject
          - s3:GetObject
          - s3:ListBucket
          - s3:PutObject
          Resource:
          - !Sub 'arn:aws:s3:::${StorageBucket}'
          - !Sub 'arn:aws:s3:::${StorageBucket}/*'
        - Effect: Allow
          Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          Resource:
          - !GetAtt Table.Arn

  ApiGatewayToLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: {Service: [apigateway.amazonaws.com]}
          Action: "sts:AssumeRole"
      Policies:
      - PolicyName: ApiGatewayToLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ["lambda:InvokeFunction"]
            Resource: !GetAtt Function.Arn

  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"

        basePath: "/"

        produces:
        - application/json

        schemes:
        - "https"

        info:
          version: "1.0"
          title: "fotopo"

        securityDefinitions:
          fotopo:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              type: "cognito_user_pools"
              providerARNs:
              - !GetAtt UserPool.Arn

        paths:
          /{action}:
            x-amazon-apigateway-any-method:
              security:
              - fotopo: []
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayToLambdaRole.Arn
                type: "aws_proxy"
                httpMethod: "POST"
                uri: !GetAtt Function.Arn
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
                passthroughBehavior: "when_no_match"
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods : "'*'"
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                  "BAD.*":
                    statusCode: "400"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin : "'*'"
                  "INT.*":
                    statusCode: "500"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin : "'*'"
              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: Bad request
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: Internal error
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
            options:
              summary: CORS support
              description: Enable CORS by returning correct headers
              consumes:
              - application/json
              produces:
              - application/json
              tags:
              - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}

              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"

            options:
              summary: CORS support
              description: Enable CORS by returning correct headers
              consumes:
              - application/json
              produces:
              - application/json
              tags:
              - CORS
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  "default":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: |
                        {}

              responses:
                "200":
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"

Outputs:
  ApiUrl:
    Description: Endpoint URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  UserPoolId:
    Description: Cognito Userpool ID
    Value: !Ref UserPool
  ClientId:
    Description: Cognito Userpool Client ID
    Value: !Ref UserPoolClient
  WebsiteBucket:
    Description: Website bucket
    Value: !Ref WebsiteBucket
  Website:
    Description: Website URL
    Value: !GetAtt WebsiteBucket.WebsiteURL
